#!/bin/bash

this_year=$(date +%Y)
this_day=$(date +%d)

download_dir() {
    local year="$1"
    local day="$2"
    printf -v day "%02d" "$day"
    echo "./data/$year/day$day"
}

fname() {
    local day="$1"
    printf -v day "%02d" "$day"
    echo "day${day}_input_puzzle.txt"
}

help() {
    local script_name
    script_name=$(basename "$0")
    echo "Downloads the input data from adventofcode.com into './data/<year>/day<day>/day<day>_input_puzzle.txt'"
    echo
    echo "Usage: $script_name [ OPTIONS ]"
    echo "Options:"
    echo "  -h, --help      Display this help message"
    echo "  -y, --year      Year to download input for (mandatory if day given)"
    echo "  -d, --day       Day to download input for"
    echo "  -a, --all       Download input for all days (of a year when given)"
    echo "  -f, --force     Force download even if input already exists"
    echo
    echo "Examples:"
    echo "  $script_name -y 2019 -d 1"
    echo "  $script_name -y 2019 -a"
    echo "  $script_name -a"
    echo "  $script_name -y 2019 -d 1 -f"
    exit 2
}

echoerr() {
    echo "ERROR: $1" 1>&2
}

check_aocd() {
    if ! command -v aocd &> /dev/null
    then
        echo "aocd could not be found. Please install it with:"
        echo "  pip install aocd"
        exit 1
    fi
}

max_day() {
    local year="$1"
    if [ "$year" -eq "$this_year" ]
    then
        echo "$this_day"
    else
        echo 25
    fi

}

check_year() {
    local year="$1"
    if [ "$year" != "" ] && { [ "$year" -lt 2015 ] || [ "$year" -gt "$this_year" ]; }
    then
        echoerr "Invalid year: $year"
        help
    fi
}

check_day() {
    local year="$1"
    local day="$2"

    local invalid=true
    local max
    max=$(max_day "$year")

    if [ "$year" != "" ] && [ "$day" != "" ] && [ "$day" -ge 1 ] && [ "$day" -le "$max" ]
    then
        invalid=false
    fi

    if [ "$invalid" = true ]
    then
        echoerr "Invalid day: $day (year: $year)"
        help
    fi
}

download_day() {
    local year=$1
    local day=$2
    local force=$3

    local input_dir
    local input_fname
    local input_path

    input_dir=$(download_dir "$year" "$day")
    input_fname=$(fname "$day")
    input_path="$input_dir/$input_fname"

    if [ -f "$input_path" ] && [ "$force" = false ]
    then
        echo "Input for day $day already exists. Skipping."
        return
    fi

    echo -n "Downloading input for $year-$day..."
    mkdir -p "$input_dir"
    aocd "$day" "$year" > "$input_path"
    echo "done."
}

download_all() {
    local year=$1
    local force=$2

    local years
    if [ "$year" = "" ]
    then
        years=$(seq 2015 "$(date +%Y)")
    else
        years=$(seq "$year" "$year")
    fi



    for year in $years
    do
        local day
        local max
        max=$(max_day "$year")

        for day in $(seq 1 "$max")
        do
            download_day "$year" "$day" "$force"
        done
    done
}

main() {
    local year
    local day
    local all=false
    local force=false

    while [ "$1" != "" ]
    do
        case $1 in
            -h | --help )           help
                                    ;;
            -y | --year )           shift
                                    year=$1
                                    ;;
            -d | --day )            shift
                                    day=$1
                                    ;;
            -a | --all )            all=true
                                    ;;
            -f | --force )          force=true
                                    ;;
            * )                     help
        esac
        shift
    done


    check_aocd

    if [ "$all" = true ]
    then
        check_year "$year" && download_all "$year" "$force"
    elif [ "$year" != "" ] && [ "$day" != "" ]
    then
        check_year "$year" && check_day "$year" "$day" && download_day "$year" "$day" "$force"
    else
        help
    fi
}

main "$@"
